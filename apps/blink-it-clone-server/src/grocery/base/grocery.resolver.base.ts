/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Grocery } from "./Grocery";
import { GroceryCountArgs } from "./GroceryCountArgs";
import { GroceryFindManyArgs } from "./GroceryFindManyArgs";
import { GroceryFindUniqueArgs } from "./GroceryFindUniqueArgs";
import { CreateGroceryArgs } from "./CreateGroceryArgs";
import { UpdateGroceryArgs } from "./UpdateGroceryArgs";
import { DeleteGroceryArgs } from "./DeleteGroceryArgs";
import { GroceryService } from "../grocery.service";
@graphql.Resolver(() => Grocery)
export class GroceryResolverBase {
  constructor(protected readonly service: GroceryService) {}

  async _groceriesMeta(
    @graphql.Args() args: GroceryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Grocery])
  async groceries(
    @graphql.Args() args: GroceryFindManyArgs
  ): Promise<Grocery[]> {
    return this.service.groceries(args);
  }

  @graphql.Query(() => Grocery, { nullable: true })
  async grocery(
    @graphql.Args() args: GroceryFindUniqueArgs
  ): Promise<Grocery | null> {
    const result = await this.service.grocery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Grocery)
  async createGrocery(
    @graphql.Args() args: CreateGroceryArgs
  ): Promise<Grocery> {
    return await this.service.createGrocery({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Grocery)
  async updateGrocery(
    @graphql.Args() args: UpdateGroceryArgs
  ): Promise<Grocery | null> {
    try {
      return await this.service.updateGrocery({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Grocery)
  async deleteGrocery(
    @graphql.Args() args: DeleteGroceryArgs
  ): Promise<Grocery | null> {
    try {
      return await this.service.deleteGrocery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
