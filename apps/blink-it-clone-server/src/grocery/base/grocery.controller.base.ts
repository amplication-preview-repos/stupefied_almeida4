/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroceryService } from "../grocery.service";
import { GroceryCreateInput } from "./GroceryCreateInput";
import { Grocery } from "./Grocery";
import { GroceryFindManyArgs } from "./GroceryFindManyArgs";
import { GroceryWhereUniqueInput } from "./GroceryWhereUniqueInput";
import { GroceryUpdateInput } from "./GroceryUpdateInput";

export class GroceryControllerBase {
  constructor(protected readonly service: GroceryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Grocery })
  async createGrocery(
    @common.Body() data: GroceryCreateInput
  ): Promise<Grocery> {
    return await this.service.createGrocery({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Grocery] })
  @ApiNestedQuery(GroceryFindManyArgs)
  async groceries(@common.Req() request: Request): Promise<Grocery[]> {
    const args = plainToClass(GroceryFindManyArgs, request.query);
    return this.service.groceries({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Grocery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async grocery(
    @common.Param() params: GroceryWhereUniqueInput
  ): Promise<Grocery | null> {
    const result = await this.service.grocery({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Grocery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGrocery(
    @common.Param() params: GroceryWhereUniqueInput,
    @common.Body() data: GroceryUpdateInput
  ): Promise<Grocery | null> {
    try {
      return await this.service.updateGrocery({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Grocery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGrocery(
    @common.Param() params: GroceryWhereUniqueInput
  ): Promise<Grocery | null> {
    try {
      return await this.service.deleteGrocery({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
