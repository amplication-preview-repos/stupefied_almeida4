/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Pharmacy as PrismaPharmacy } from "@prisma/client";

export class PharmacyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PharmacyCountArgs, "select">): Promise<number> {
    return this.prisma.pharmacy.count(args);
  }

  async pharmacies(
    args: Prisma.PharmacyFindManyArgs
  ): Promise<PrismaPharmacy[]> {
    return this.prisma.pharmacy.findMany(args);
  }
  async pharmacy(
    args: Prisma.PharmacyFindUniqueArgs
  ): Promise<PrismaPharmacy | null> {
    return this.prisma.pharmacy.findUnique(args);
  }
  async createPharmacy(
    args: Prisma.PharmacyCreateArgs
  ): Promise<PrismaPharmacy> {
    return this.prisma.pharmacy.create(args);
  }
  async updatePharmacy(
    args: Prisma.PharmacyUpdateArgs
  ): Promise<PrismaPharmacy> {
    return this.prisma.pharmacy.update(args);
  }
  async deletePharmacy(
    args: Prisma.PharmacyDeleteArgs
  ): Promise<PrismaPharmacy> {
    return this.prisma.pharmacy.delete(args);
  }
}
