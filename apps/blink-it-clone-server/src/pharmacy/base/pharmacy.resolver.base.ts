/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pharmacy } from "./Pharmacy";
import { PharmacyCountArgs } from "./PharmacyCountArgs";
import { PharmacyFindManyArgs } from "./PharmacyFindManyArgs";
import { PharmacyFindUniqueArgs } from "./PharmacyFindUniqueArgs";
import { CreatePharmacyArgs } from "./CreatePharmacyArgs";
import { UpdatePharmacyArgs } from "./UpdatePharmacyArgs";
import { DeletePharmacyArgs } from "./DeletePharmacyArgs";
import { PharmacyService } from "../pharmacy.service";
@graphql.Resolver(() => Pharmacy)
export class PharmacyResolverBase {
  constructor(protected readonly service: PharmacyService) {}

  async _pharmaciesMeta(
    @graphql.Args() args: PharmacyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pharmacy])
  async pharmacies(
    @graphql.Args() args: PharmacyFindManyArgs
  ): Promise<Pharmacy[]> {
    return this.service.pharmacies(args);
  }

  @graphql.Query(() => Pharmacy, { nullable: true })
  async pharmacy(
    @graphql.Args() args: PharmacyFindUniqueArgs
  ): Promise<Pharmacy | null> {
    const result = await this.service.pharmacy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pharmacy)
  async createPharmacy(
    @graphql.Args() args: CreatePharmacyArgs
  ): Promise<Pharmacy> {
    return await this.service.createPharmacy({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pharmacy)
  async updatePharmacy(
    @graphql.Args() args: UpdatePharmacyArgs
  ): Promise<Pharmacy | null> {
    try {
      return await this.service.updatePharmacy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pharmacy)
  async deletePharmacy(
    @graphql.Args() args: DeletePharmacyArgs
  ): Promise<Pharmacy | null> {
    try {
      return await this.service.deletePharmacy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
