/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bakery } from "./Bakery";
import { BakeryCountArgs } from "./BakeryCountArgs";
import { BakeryFindManyArgs } from "./BakeryFindManyArgs";
import { BakeryFindUniqueArgs } from "./BakeryFindUniqueArgs";
import { CreateBakeryArgs } from "./CreateBakeryArgs";
import { UpdateBakeryArgs } from "./UpdateBakeryArgs";
import { DeleteBakeryArgs } from "./DeleteBakeryArgs";
import { BakeryService } from "../bakery.service";
@graphql.Resolver(() => Bakery)
export class BakeryResolverBase {
  constructor(protected readonly service: BakeryService) {}

  async _bakeriesMeta(
    @graphql.Args() args: BakeryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bakery])
  async bakeries(@graphql.Args() args: BakeryFindManyArgs): Promise<Bakery[]> {
    return this.service.bakeries(args);
  }

  @graphql.Query(() => Bakery, { nullable: true })
  async bakery(
    @graphql.Args() args: BakeryFindUniqueArgs
  ): Promise<Bakery | null> {
    const result = await this.service.bakery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bakery)
  async createBakery(@graphql.Args() args: CreateBakeryArgs): Promise<Bakery> {
    return await this.service.createBakery({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bakery)
  async updateBakery(
    @graphql.Args() args: UpdateBakeryArgs
  ): Promise<Bakery | null> {
    try {
      return await this.service.updateBakery({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bakery)
  async deleteBakery(
    @graphql.Args() args: DeleteBakeryArgs
  ): Promise<Bakery | null> {
    try {
      return await this.service.deleteBakery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
