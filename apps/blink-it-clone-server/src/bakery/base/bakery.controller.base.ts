/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BakeryService } from "../bakery.service";
import { BakeryCreateInput } from "./BakeryCreateInput";
import { Bakery } from "./Bakery";
import { BakeryFindManyArgs } from "./BakeryFindManyArgs";
import { BakeryWhereUniqueInput } from "./BakeryWhereUniqueInput";
import { BakeryUpdateInput } from "./BakeryUpdateInput";

export class BakeryControllerBase {
  constructor(protected readonly service: BakeryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bakery })
  async createBakery(@common.Body() data: BakeryCreateInput): Promise<Bakery> {
    return await this.service.createBakery({
      data: data,
      select: {
        bakedOn: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bakery] })
  @ApiNestedQuery(BakeryFindManyArgs)
  async bakeries(@common.Req() request: Request): Promise<Bakery[]> {
    const args = plainToClass(BakeryFindManyArgs, request.query);
    return this.service.bakeries({
      ...args,
      select: {
        bakedOn: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bakery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bakery(
    @common.Param() params: BakeryWhereUniqueInput
  ): Promise<Bakery | null> {
    const result = await this.service.bakery({
      where: params,
      select: {
        bakedOn: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bakery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBakery(
    @common.Param() params: BakeryWhereUniqueInput,
    @common.Body() data: BakeryUpdateInput
  ): Promise<Bakery | null> {
    try {
      return await this.service.updateBakery({
        where: params,
        data: data,
        select: {
          bakedOn: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bakery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBakery(
    @common.Param() params: BakeryWhereUniqueInput
  ): Promise<Bakery | null> {
    try {
      return await this.service.deleteBakery({
        where: params,
        select: {
          bakedOn: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
