/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BakeryItemService } from "../bakeryItem.service";
import { BakeryItemCreateInput } from "./BakeryItemCreateInput";
import { BakeryItem } from "./BakeryItem";
import { BakeryItemFindManyArgs } from "./BakeryItemFindManyArgs";
import { BakeryItemWhereUniqueInput } from "./BakeryItemWhereUniqueInput";
import { BakeryItemUpdateInput } from "./BakeryItemUpdateInput";

export class BakeryItemControllerBase {
  constructor(protected readonly service: BakeryItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BakeryItem })
  async createBakeryItem(
    @common.Body() data: BakeryItemCreateInput
  ): Promise<BakeryItem> {
    return await this.service.createBakeryItem({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BakeryItem] })
  @ApiNestedQuery(BakeryItemFindManyArgs)
  async bakeryItems(@common.Req() request: Request): Promise<BakeryItem[]> {
    const args = plainToClass(BakeryItemFindManyArgs, request.query);
    return this.service.bakeryItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BakeryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bakeryItem(
    @common.Param() params: BakeryItemWhereUniqueInput
  ): Promise<BakeryItem | null> {
    const result = await this.service.bakeryItem({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BakeryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBakeryItem(
    @common.Param() params: BakeryItemWhereUniqueInput,
    @common.Body() data: BakeryItemUpdateInput
  ): Promise<BakeryItem | null> {
    try {
      return await this.service.updateBakeryItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BakeryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBakeryItem(
    @common.Param() params: BakeryItemWhereUniqueInput
  ): Promise<BakeryItem | null> {
    try {
      return await this.service.deleteBakeryItem({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
