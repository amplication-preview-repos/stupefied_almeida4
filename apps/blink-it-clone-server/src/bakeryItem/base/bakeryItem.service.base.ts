/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BakeryItem as PrismaBakeryItem } from "@prisma/client";

export class BakeryItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BakeryItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bakeryItem.count(args);
  }

  async bakeryItems(
    args: Prisma.BakeryItemFindManyArgs
  ): Promise<PrismaBakeryItem[]> {
    return this.prisma.bakeryItem.findMany(args);
  }
  async bakeryItem(
    args: Prisma.BakeryItemFindUniqueArgs
  ): Promise<PrismaBakeryItem | null> {
    return this.prisma.bakeryItem.findUnique(args);
  }
  async createBakeryItem(
    args: Prisma.BakeryItemCreateArgs
  ): Promise<PrismaBakeryItem> {
    return this.prisma.bakeryItem.create(args);
  }
  async updateBakeryItem(
    args: Prisma.BakeryItemUpdateArgs
  ): Promise<PrismaBakeryItem> {
    return this.prisma.bakeryItem.update(args);
  }
  async deleteBakeryItem(
    args: Prisma.BakeryItemDeleteArgs
  ): Promise<PrismaBakeryItem> {
    return this.prisma.bakeryItem.delete(args);
  }
}
