/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BakeryItem } from "./BakeryItem";
import { BakeryItemCountArgs } from "./BakeryItemCountArgs";
import { BakeryItemFindManyArgs } from "./BakeryItemFindManyArgs";
import { BakeryItemFindUniqueArgs } from "./BakeryItemFindUniqueArgs";
import { CreateBakeryItemArgs } from "./CreateBakeryItemArgs";
import { UpdateBakeryItemArgs } from "./UpdateBakeryItemArgs";
import { DeleteBakeryItemArgs } from "./DeleteBakeryItemArgs";
import { BakeryItemService } from "../bakeryItem.service";
@graphql.Resolver(() => BakeryItem)
export class BakeryItemResolverBase {
  constructor(protected readonly service: BakeryItemService) {}

  async _bakeryItemsMeta(
    @graphql.Args() args: BakeryItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BakeryItem])
  async bakeryItems(
    @graphql.Args() args: BakeryItemFindManyArgs
  ): Promise<BakeryItem[]> {
    return this.service.bakeryItems(args);
  }

  @graphql.Query(() => BakeryItem, { nullable: true })
  async bakeryItem(
    @graphql.Args() args: BakeryItemFindUniqueArgs
  ): Promise<BakeryItem | null> {
    const result = await this.service.bakeryItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BakeryItem)
  async createBakeryItem(
    @graphql.Args() args: CreateBakeryItemArgs
  ): Promise<BakeryItem> {
    return await this.service.createBakeryItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BakeryItem)
  async updateBakeryItem(
    @graphql.Args() args: UpdateBakeryItemArgs
  ): Promise<BakeryItem | null> {
    try {
      return await this.service.updateBakeryItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BakeryItem)
  async deleteBakeryItem(
    @graphql.Args() args: DeleteBakeryItemArgs
  ): Promise<BakeryItem | null> {
    try {
      return await this.service.deleteBakeryItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
